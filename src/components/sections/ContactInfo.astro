---
import type { Entry } from "contentful";
import type { ItemFields, ContactInfo } from "../../models/content.model";
import Container from "../shared/Container.astro";
import SectionHeader from "../shared/SectionHeader.astro";

interface Props {
  content: Entry<ItemFields>[];
}

const { content } = Astro.props;
const data: ContactInfo = Object.assign({}, ...content);
---

<Container class="contacts" id="more-info">
  <SectionHeader>
    <Fragment slot="title">{data.fields.title}</Fragment>
    <Fragment slot="subtitle">{data.fields.legend}</Fragment>
  </SectionHeader>

  <!-- contact form -->
  <div class="contact-form">
    <form id="cform" method="post" class="needs-validation" novalidate>
      <input
        type="hidden"
        name="access_key"
        value="83bcf9da-0123-48be-b8f0-cd71909841ef"
      />
      <input
        type="hidden"
        name="subject"
        value="New Submission from Web3Forms"
      />
      <input type="checkbox" name="botcheck" id="" style="display: none;" />
      <div class="group-val">
        <div class="label">
          {data.fields.formFields.name_field.label}
          <strong>*</strong>
        </div>
        <input
          type="text"
          name="name"
          required
          placeholder={data.fields.formFields.name_field.placeholder}
        />
        <div class="empty-feedback invalid-feedback text-red-500">
          Please provide your full name.
        </div>
      </div>
      <div class="group-val">
        <div class="label">
          {data.fields.formFields.email_field.label}
          <strong>*</strong>
        </div>
        <input
          type="email"
          name="email"
          required
          placeholder={data.fields.formFields.email_field.placeholder}
        />
        <div class="empty-feedback text-red-500">
          Please provide your email address.
        </div>
        <div class="invalid-feedback text-red-500">
          Please provide a valid email address.
        </div>
      </div>
      <div class="group-val">
        <div class="label">
          {data.fields.formFields.message_field.label}
          <strong>*</strong>
        </div>
        <textarea
          name="message"
          placeholder={data.fields.formFields.message_field.placeholder}
          required></textarea>
        <div class="empty-feedback invalid-feedback text-red-500">
          Please enter your message.
        </div>
        <div id="result" class="align-center"></div>
      </div>
      <div id="html_element"></div>
      <div class="group-bts">
        <button type="submit" class="btn">
          <span class="animated-button">
            <span>
              {data.fields.formFields.send_btn.label}
            </span>
          </span>
          <i class={data.fields.formFields.send_btn.icon}></i>
        </button>
      </div>
    </form>
  </div>

  <!-- contact info -->
  <div class="contact-info">
    <div class="name">Josué Rojas</div>
    <div class="subname">{data.fields.workPosition}</div>
    <div class="info-list">
      <ul>
        {
          Object.entries(data.fields.properties).map(
            ([_, { title, value }]) => (
              <li>
                <strong>{title}:</strong> {value}
              </li>
            )
          )
        }
      </ul>
    </div>
    <div class="author">Josué Rojas</div>
  </div>

  <div class="clear"></div>
</Container>

<style>
  .invalid-feedback,
  .empty-feedback {
    display: none;
  }

  .was-validated :placeholder-shown:invalid ~ .empty-feedback {
    display: block;
  }

  .was-validated :not(:placeholder-shown):invalid ~ .invalid-feedback {
    display: block;
  }

  .is-invalid,
  .was-validated :invalid {
    border-color: #dc3545;
  }
</style>

<script is:inline>
  const form = document.getElementById("cform");
  const result = document.getElementById("result");

  form.addEventListener("submit", async function (e) {
    e.preventDefault();
    form.classList.add("was-validated");
    if (!form.checkValidity()) {
      form.querySelectorAll(":invalid")[0].focus();
      return;
    }
    const response = grecaptcha.getResponse();
    const formData = new FormData(form);
    const jsonData = JSON.stringify(Object.fromEntries(formData));

    if (response.length === 0) {
      result.classList.add("text-red-500");
      result.innerHTML = "Check reCAPCHA";
    } else {
      result.innerHTML = "Sending...";
      try {
        const response = await fetch("https://api.web3forms.com/submit", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
          },
          body: jsonData,
        });

        const json = await response.json();

        if (response.status === 200) {
          result.classList.add("text-green-500");
          result.innerHTML = json.message;
        } else {
          result.classList.add("text-red-500");
          result.innerHTML = json.message;
        }
      } catch (error) {
        result.classList.add("text-red-500");
        result.innerHTML = "Something went wrong!";
      } finally {
        form.reset();
        form.classList.remove("was-validated");
        setTimeout(() => {
          result.style.display = "none";
        }, 5000);
      }
    }
  });
</script>
